version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - DRAGONFLY_HOST=dragonfly
      - DRAGONFLY_PORT=6379
      - QUEUE_REDIS_HOST=queue-redis
      - QUEUE_REDIS_PORT=6379
      - TIMESCALE_USER=${TIMESCALE_USER}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD}
      - TIMESCALE_DB=${TIMESCALE_DB}
    ports:
      - "3000:3000"
    depends_on:
      timescaledb:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
      queue-redis:
        condition: service_healthy
    networks:
      - app-network

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      - POSTGRES_USER=${TIMESCALE_USER}
      - POSTGRES_PASSWORD=${TIMESCALE_PASSWORD}
      - POSTGRES_DB=${TIMESCALE_DB}
    ports:
      - "${TIMESCALE_PORT}:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER} -d ${TIMESCALE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  dragonfly:
    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
    ulimits:
      memlock: -1
    ports:
      - "${DRAGONFLY_PORT}:6379"
    volumes:
      - dragonfly_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  queue-redis:
    image: redis:alpine
    command: redis-server --port 6379
    ports:
      - "${QUEUE_REDIS_PORT}:6379"
    volumes:
      - queue_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  timescaledb_data:
  dragonfly_data:
  queue_redis_data: