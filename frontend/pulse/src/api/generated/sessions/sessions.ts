/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  CreateSessions201,
  GetAllSessionss200Item,
  GetSessionsById200,
  UpdateSessions200,
} from '.././models';
import { customInstance } from '../../axios-client';

/**
 * @summary Create Sessions
 */
export const createSessions = (signal?: AbortSignal) => {
  return customInstance<CreateSessions201>({
    url: `/sessions`,
    method: 'POST',
    signal,
  });
};

export const getCreateSessionsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSessions>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSessions>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['createSessions'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSessions>>,
    void
  > = () => {
    return createSessions();
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSessionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSessions>>
>;

export type CreateSessionsMutationError = unknown;

/**
 * @summary Create Sessions
 */
export const useCreateSessions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSessions>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createSessions>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getCreateSessionsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get all Sessionss
 */
export const getAllSessionss = (signal?: AbortSignal) => {
  return customInstance<GetAllSessionss200Item[]>({
    url: `/sessions`,
    method: 'GET',
    signal,
  });
};

export const getGetAllSessionssQueryKey = () => {
  return [`/sessions`] as const;
};

export const getGetAllSessionssQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSessionss>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllSessionss>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllSessionssQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSessionss>>> = ({
    signal,
  }) => getAllSessionss(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllSessionss>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllSessionssQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllSessionss>>
>;
export type GetAllSessionssQueryError = unknown;

/**
 * @summary Get all Sessionss
 */

export function useGetAllSessionss<
  TData = Awaited<ReturnType<typeof getAllSessionss>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllSessionss>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllSessionssQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Sessions by ID
 */
export const getSessionsById = (id: string, signal?: AbortSignal) => {
  return customInstance<GetSessionsById200>({
    url: `/sessions/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetSessionsByIdQueryKey = (id: string) => {
  return [`/sessions/${id}`] as const;
};

export const getGetSessionsByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getSessionsById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSessionsById>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSessionsByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSessionsById>>> = ({
    signal,
  }) => getSessionsById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSessionsById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSessionsByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSessionsById>>
>;
export type GetSessionsByIdQueryError = unknown;

/**
 * @summary Get Sessions by ID
 */

export function useGetSessionsById<
  TData = Awaited<ReturnType<typeof getSessionsById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSessionsById>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSessionsByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Sessions
 */
export const updateSessions = (id: string) => {
  return customInstance<UpdateSessions200>({
    url: `/sessions/${id}`,
    method: 'PUT',
  });
};

export const getUpdateSessionsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSessions>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSessions>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['updateSessions'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSessions>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return updateSessions(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateSessionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSessions>>
>;

export type UpdateSessionsMutationError = unknown;

/**
 * @summary Update Sessions
 */
export const useUpdateSessions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSessions>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSessions>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUpdateSessionsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Sessions
 */
export const deleteSessions = (id: string) => {
  return customInstance<boolean>({ url: `/sessions/${id}`, method: 'DELETE' });
};

export const getDeleteSessionsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSessions>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSessions>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteSessions'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSessions>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteSessions(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSessionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSessions>>
>;

export type DeleteSessionsMutationError = unknown;

/**
 * @summary Delete Sessions
 */
export const useDeleteSessions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSessions>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteSessions>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteSessionsMutationOptions(options);

  return useMutation(mutationOptions);
};
