/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateWebsiteAccessDto,
  GetByQueryWebsiteAccesssParams,
  ResponseDtoArray,
  UpdateWebsiteAccessDto,
  WebsiteAccessResponseDto,
} from '.././models';

import { customInstance } from '../../axios-client';

/**
 * The Website-access has been successfully created
 * @summary Create Website-access
 */
export const createWebsiteAccess = (
  createWebsiteAccessDto: CreateWebsiteAccessDto,
  signal?: AbortSignal,
) => {
  return customInstance<WebsiteAccessResponseDto>({
    url: `/website-access`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createWebsiteAccessDto,
    signal,
  });
};

export const getCreateWebsiteAccessMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebsiteAccess>>,
    TError,
    { data: CreateWebsiteAccessDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWebsiteAccess>>,
  TError,
  { data: CreateWebsiteAccessDto },
  TContext
> => {
  const mutationKey = ['createWebsiteAccess'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWebsiteAccess>>,
    { data: CreateWebsiteAccessDto }
  > = (props) => {
    const { data } = props ?? {};

    return createWebsiteAccess(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWebsiteAccessMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWebsiteAccess>>
>;
export type CreateWebsiteAccessMutationBody = CreateWebsiteAccessDto;
export type CreateWebsiteAccessMutationError = unknown;

/**
 * @summary Create Website-access
 */
export const useCreateWebsiteAccess = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebsiteAccess>>,
    TError,
    { data: CreateWebsiteAccessDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createWebsiteAccess>>,
  TError,
  { data: CreateWebsiteAccessDto },
  TContext
> => {
  const mutationOptions = getCreateWebsiteAccessMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Return the Website-access with the specified ID
 * @summary Get Website-access by ID
 */
export const getWebsiteAccessById = (id: string, signal?: AbortSignal) => {
  return customInstance<WebsiteAccessResponseDto>({
    url: `/website-access/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetWebsiteAccessByIdQueryKey = (id: string) => {
  return [`/website-access/${id}`] as const;
};

export const getGetWebsiteAccessByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebsiteAccessById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsiteAccessById>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWebsiteAccessByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWebsiteAccessById>>
  > = ({ signal }) => getWebsiteAccessById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWebsiteAccessById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWebsiteAccessByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebsiteAccessById>>
>;
export type GetWebsiteAccessByIdQueryError = unknown;

/**
 * @summary Get Website-access by ID
 */

export function useGetWebsiteAccessById<
  TData = Awaited<ReturnType<typeof getWebsiteAccessById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsiteAccessById>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetWebsiteAccessByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return all Website-accesss
 * @summary Get all Website-accesss
 */
export const getAllWebsiteAccesss = (signal?: AbortSignal) => {
  return customInstance<ResponseDtoArray[]>({
    url: `/website-access/all`,
    method: 'GET',
    signal,
  });
};

export const getGetAllWebsiteAccesssQueryKey = () => {
  return [`/website-access/all`] as const;
};

export const getGetAllWebsiteAccesssQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllWebsiteAccesss>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllWebsiteAccesss>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllWebsiteAccesssQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllWebsiteAccesss>>
  > = ({ signal }) => getAllWebsiteAccesss(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllWebsiteAccesss>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllWebsiteAccesssQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllWebsiteAccesss>>
>;
export type GetAllWebsiteAccesssQueryError = unknown;

/**
 * @summary Get all Website-accesss
 */

export function useGetAllWebsiteAccesss<
  TData = Awaited<ReturnType<typeof getAllWebsiteAccesss>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllWebsiteAccesss>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllWebsiteAccesssQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return Website-accesss by query
 * @summary Get by query Website-accesss
 */
export const getByQueryWebsiteAccesss = (
  params?: GetByQueryWebsiteAccesssParams,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDtoArray[]>({
    url: `/website-access/query`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetByQueryWebsiteAccesssQueryKey = (
  params?: GetByQueryWebsiteAccesssParams,
) => {
  return [`/website-access/query`, ...(params ? [params] : [])] as const;
};

export const getGetByQueryWebsiteAccesssQueryOptions = <
  TData = Awaited<ReturnType<typeof getByQueryWebsiteAccesss>>,
  TError = unknown,
>(
  params?: GetByQueryWebsiteAccesssParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getByQueryWebsiteAccesss>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetByQueryWebsiteAccesssQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getByQueryWebsiteAccesss>>
  > = ({ signal }) => getByQueryWebsiteAccesss(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByQueryWebsiteAccesss>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetByQueryWebsiteAccesssQueryResult = NonNullable<
  Awaited<ReturnType<typeof getByQueryWebsiteAccesss>>
>;
export type GetByQueryWebsiteAccesssQueryError = unknown;

/**
 * @summary Get by query Website-accesss
 */

export function useGetByQueryWebsiteAccesss<
  TData = Awaited<ReturnType<typeof getByQueryWebsiteAccesss>>,
  TError = unknown,
>(
  params?: GetByQueryWebsiteAccesssParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getByQueryWebsiteAccesss>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetByQueryWebsiteAccesssQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update the Website-access with the specified ID
 * @summary Update Website-access
 */
export const updateWebsiteAccess = (
  id: string,
  updateWebsiteAccessDto: UpdateWebsiteAccessDto,
) => {
  return customInstance<WebsiteAccessResponseDto>({
    url: `/website-access/update/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateWebsiteAccessDto,
  });
};

export const getUpdateWebsiteAccessMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebsiteAccess>>,
    TError,
    { id: string; data: UpdateWebsiteAccessDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateWebsiteAccess>>,
  TError,
  { id: string; data: UpdateWebsiteAccessDto },
  TContext
> => {
  const mutationKey = ['updateWebsiteAccess'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateWebsiteAccess>>,
    { id: string; data: UpdateWebsiteAccessDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateWebsiteAccess(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateWebsiteAccessMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateWebsiteAccess>>
>;
export type UpdateWebsiteAccessMutationBody = UpdateWebsiteAccessDto;
export type UpdateWebsiteAccessMutationError = unknown;

/**
 * @summary Update Website-access
 */
export const useUpdateWebsiteAccess = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebsiteAccess>>,
    TError,
    { id: string; data: UpdateWebsiteAccessDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateWebsiteAccess>>,
  TError,
  { id: string; data: UpdateWebsiteAccessDto },
  TContext
> => {
  const mutationOptions = getUpdateWebsiteAccessMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete the Website-access with the specified ID
 * @summary Delete Website-access
 */
export const deleteWebsiteAccess = (id: string) => {
  return customInstance<boolean>({
    url: `/website-access/delete/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteWebsiteAccessMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWebsiteAccess>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWebsiteAccess>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteWebsiteAccess'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWebsiteAccess>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteWebsiteAccess(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWebsiteAccessMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWebsiteAccess>>
>;

export type DeleteWebsiteAccessMutationError = unknown;

/**
 * @summary Delete Website-access
 */
export const useDeleteWebsiteAccess = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWebsiteAccess>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteWebsiteAccess>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteWebsiteAccessMutationOptions(options);

  return useMutation(mutationOptions);
};
