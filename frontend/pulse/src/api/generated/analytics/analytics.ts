/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  GetAudienceAnalytics200,
  GetAudienceAnalyticsParams,
  GetPagePerformanceStats200,
  GetPagePerformanceStatsParams,
  GetRealtimeAnalytics200,
  GetTrafficSourceStats200,
  GetTrafficSourceStatsParams,
  GetUserBehaviorStats200,
  GetUserBehaviorStatsParams,
} from '.././models';

import { customInstance } from '../../axios-client';

/**
 * Returns traffic source statistics for the specified time range
 * @summary Get traffic source statistics
 */
export const getTrafficSourceStats = (
  websiteId: string,
  params: GetTrafficSourceStatsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetTrafficSourceStats200>({
    url: `/websites/${websiteId}/analytics/traffic`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetTrafficSourceStatsQueryKey = (
  websiteId: string,
  params: GetTrafficSourceStatsParams,
) => {
  return [
    `/websites/${websiteId}/analytics/traffic`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetTrafficSourceStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrafficSourceStats>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetTrafficSourceStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTrafficSourceStats>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTrafficSourceStatsQueryKey(websiteId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrafficSourceStats>>
  > = ({ signal }) => getTrafficSourceStats(websiteId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!websiteId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrafficSourceStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTrafficSourceStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrafficSourceStats>>
>;
export type GetTrafficSourceStatsQueryError = unknown;

/**
 * @summary Get traffic source statistics
 */

export function useGetTrafficSourceStats<
  TData = Awaited<ReturnType<typeof getTrafficSourceStats>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetTrafficSourceStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTrafficSourceStats>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTrafficSourceStatsQueryOptions(
    websiteId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns page performance statistics for the specified time range
 * @summary Get page performance statistics
 */
export const getPagePerformanceStats = (
  websiteId: string,
  params: GetPagePerformanceStatsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetPagePerformanceStats200>({
    url: `/websites/${websiteId}/analytics/pages`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetPagePerformanceStatsQueryKey = (
  websiteId: string,
  params: GetPagePerformanceStatsParams,
) => {
  return [
    `/websites/${websiteId}/analytics/pages`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPagePerformanceStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPagePerformanceStats>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetPagePerformanceStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPagePerformanceStats>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetPagePerformanceStatsQueryKey(websiteId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPagePerformanceStats>>
  > = ({ signal }) => getPagePerformanceStats(websiteId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!websiteId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPagePerformanceStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPagePerformanceStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPagePerformanceStats>>
>;
export type GetPagePerformanceStatsQueryError = unknown;

/**
 * @summary Get page performance statistics
 */

export function useGetPagePerformanceStats<
  TData = Awaited<ReturnType<typeof getPagePerformanceStats>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetPagePerformanceStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPagePerformanceStats>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPagePerformanceStatsQueryOptions(
    websiteId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns user behavior statistics for the specified time range
 * @summary Get user behavior statistics
 */
export const getUserBehaviorStats = (
  websiteId: string,
  params: GetUserBehaviorStatsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetUserBehaviorStats200>({
    url: `/websites/${websiteId}/analytics/users`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetUserBehaviorStatsQueryKey = (
  websiteId: string,
  params: GetUserBehaviorStatsParams,
) => {
  return [
    `/websites/${websiteId}/analytics/users`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUserBehaviorStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserBehaviorStats>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetUserBehaviorStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserBehaviorStats>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserBehaviorStatsQueryKey(websiteId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserBehaviorStats>>
  > = ({ signal }) => getUserBehaviorStats(websiteId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!websiteId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserBehaviorStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserBehaviorStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBehaviorStats>>
>;
export type GetUserBehaviorStatsQueryError = unknown;

/**
 * @summary Get user behavior statistics
 */

export function useGetUserBehaviorStats<
  TData = Awaited<ReturnType<typeof getUserBehaviorStats>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetUserBehaviorStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserBehaviorStats>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserBehaviorStatsQueryOptions(
    websiteId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns realtime analytics data
 * @summary Get realtime analytics data
 */
export const getRealtimeAnalytics = (
  websiteId: string,
  signal?: AbortSignal,
) => {
  return customInstance<GetRealtimeAnalytics200>({
    url: `/websites/${websiteId}/analytics/realtime`,
    method: 'GET',
    signal,
  });
};

export const getGetRealtimeAnalyticsQueryKey = (websiteId: string) => {
  return [`/websites/${websiteId}/analytics/realtime`] as const;
};

export const getGetRealtimeAnalyticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRealtimeAnalytics>>,
  TError = unknown,
>(
  websiteId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRealtimeAnalytics>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRealtimeAnalyticsQueryKey(websiteId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRealtimeAnalytics>>
  > = ({ signal }) => getRealtimeAnalytics(websiteId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!websiteId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRealtimeAnalytics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRealtimeAnalyticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRealtimeAnalytics>>
>;
export type GetRealtimeAnalyticsQueryError = unknown;

/**
 * @summary Get realtime analytics data
 */

export function useGetRealtimeAnalytics<
  TData = Awaited<ReturnType<typeof getRealtimeAnalytics>>,
  TError = unknown,
>(
  websiteId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRealtimeAnalytics>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRealtimeAnalyticsQueryOptions(websiteId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns audience analytics for the specified time range
 * @summary Get audience analytics
 */
export const getAudienceAnalytics = (
  websiteId: string,
  params: GetAudienceAnalyticsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetAudienceAnalytics200>({
    url: `/websites/${websiteId}/analytics/audience`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetAudienceAnalyticsQueryKey = (
  websiteId: string,
  params: GetAudienceAnalyticsParams,
) => {
  return [
    `/websites/${websiteId}/analytics/audience`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAudienceAnalyticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAudienceAnalytics>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetAudienceAnalyticsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAudienceAnalytics>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAudienceAnalyticsQueryKey(websiteId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAudienceAnalytics>>
  > = ({ signal }) => getAudienceAnalytics(websiteId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!websiteId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAudienceAnalytics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAudienceAnalyticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAudienceAnalytics>>
>;
export type GetAudienceAnalyticsQueryError = unknown;

/**
 * @summary Get audience analytics
 */

export function useGetAudienceAnalytics<
  TData = Awaited<ReturnType<typeof getAudienceAnalytics>>,
  TError = unknown,
>(
  websiteId: string,
  params: GetAudienceAnalyticsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAudienceAnalytics>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAudienceAnalyticsQueryOptions(
    websiteId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
