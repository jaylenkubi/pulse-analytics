/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  InfiniteData,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  AnalyticsControllerGetEventStatsParams,
  AnalyticsControllerGetEventTimelineParams,
} from '.././models';
import { customInstance } from '../../axios-client';

/**
 * @summary Get event statistics
 */
export const analyticsControllerGetEventStats = (
  params: AnalyticsControllerGetEventStatsParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/analytics/stats`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAnalyticsControllerGetEventStatsQueryKey = (
  params: AnalyticsControllerGetEventStatsParams,
) => {
  return [`/analytics/stats`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsControllerGetEventStatsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
    AnalyticsControllerGetEventStatsParams['page']
  >,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventStatsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
        TError,
        TData,
        Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
        QueryKey,
        AnalyticsControllerGetEventStatsParams['page']
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetEventStatsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
    QueryKey,
    AnalyticsControllerGetEventStatsParams['page']
  > = ({ signal, pageParam }) =>
    analyticsControllerGetEventStats(
      { ...params, page: pageParam || params?.['page'] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
    TError,
    TData,
    Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
    QueryKey,
    AnalyticsControllerGetEventStatsParams['page']
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetEventStatsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetEventStats>>
>;
export type AnalyticsControllerGetEventStatsInfiniteQueryError = unknown;

/**
 * @summary Get event statistics
 */
export const useAnalyticsControllerGetEventStatsInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
    AnalyticsControllerGetEventStatsParams['page']
  >,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventStatsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
        TError,
        TData,
        Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
        QueryKey,
        AnalyticsControllerGetEventStatsParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAnalyticsControllerGetEventStatsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAnalyticsControllerGetEventStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetEventStatsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetEventStats>>
  > = ({ signal }) => analyticsControllerGetEventStats(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetEventStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetEventStats>>
>;
export type AnalyticsControllerGetEventStatsQueryError = unknown;

/**
 * @summary Get event statistics
 */
export const useAnalyticsControllerGetEventStats = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventStats>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAnalyticsControllerGetEventStatsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get realtime events
 */
export const analyticsControllerGetRealtimeEvents = (signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/analytics/realtime`,
    method: 'GET',
    signal,
  });
};

export const getAnalyticsControllerGetRealtimeEventsQueryKey = () => {
  return [`/analytics/realtime`] as const;
};

export const getAnalyticsControllerGetRealtimeEventsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAnalyticsControllerGetRealtimeEventsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>
  > = ({ signal }) => analyticsControllerGetRealtimeEvents(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetRealtimeEventsInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>>;
export type AnalyticsControllerGetRealtimeEventsInfiniteQueryError = unknown;

/**
 * @summary Get realtime events
 */
export const useAnalyticsControllerGetRealtimeEventsInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
      TError,
      TData
    >
  >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAnalyticsControllerGetRealtimeEventsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAnalyticsControllerGetRealtimeEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAnalyticsControllerGetRealtimeEventsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>
  > = ({ signal }) => analyticsControllerGetRealtimeEvents(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetRealtimeEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>
>;
export type AnalyticsControllerGetRealtimeEventsQueryError = unknown;

/**
 * @summary Get realtime events
 */
export const useAnalyticsControllerGetRealtimeEvents = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetRealtimeEvents>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAnalyticsControllerGetRealtimeEventsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get event timeline
 */
export const analyticsControllerGetEventTimeline = (
  params: AnalyticsControllerGetEventTimelineParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/analytics/timeline`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAnalyticsControllerGetEventTimelineQueryKey = (
  params: AnalyticsControllerGetEventTimelineParams,
) => {
  return [`/analytics/timeline`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsControllerGetEventTimelineInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
    AnalyticsControllerGetEventTimelineParams['page']
  >,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventTimelineParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
        TError,
        TData,
        Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
        QueryKey,
        AnalyticsControllerGetEventTimelineParams['page']
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetEventTimelineQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
    QueryKey,
    AnalyticsControllerGetEventTimelineParams['page']
  > = ({ signal, pageParam }) =>
    analyticsControllerGetEventTimeline(
      { ...params, page: pageParam || params?.['page'] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
    TError,
    TData,
    Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
    QueryKey,
    AnalyticsControllerGetEventTimelineParams['page']
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetEventTimelineInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>>;
export type AnalyticsControllerGetEventTimelineInfiniteQueryError = unknown;

/**
 * @summary Get event timeline
 */
export const useAnalyticsControllerGetEventTimelineInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
    AnalyticsControllerGetEventTimelineParams['page']
  >,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventTimelineParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
        TError,
        TData,
        Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
        QueryKey,
        AnalyticsControllerGetEventTimelineParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAnalyticsControllerGetEventTimelineInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAnalyticsControllerGetEventTimelineQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventTimelineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetEventTimelineQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>
  > = ({ signal }) => analyticsControllerGetEventTimeline(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetEventTimelineQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>
>;
export type AnalyticsControllerGetEventTimelineQueryError = unknown;

/**
 * @summary Get event timeline
 */
export const useAnalyticsControllerGetEventTimeline = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetEventTimelineParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsControllerGetEventTimeline>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAnalyticsControllerGetEventTimelineQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
