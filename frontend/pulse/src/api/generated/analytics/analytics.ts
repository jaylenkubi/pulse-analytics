/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  AnalyticsControllerGetAudienceAnalyticsParams,
  AnalyticsControllerGetPagePerformanceParams,
  AnalyticsControllerGetTrafficSourceStatsParams,
  AnalyticsControllerGetUserBehaviorParams,
} from '.././models';
import { customInstance } from '../../axios-client';

/**
 * @summary Get traffic source statistics
 */
export const analyticsControllerGetTrafficSourceStats = (
  params: AnalyticsControllerGetTrafficSourceStatsParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/analytics/traffic`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAnalyticsControllerGetTrafficSourceStatsQueryKey = (
  params: AnalyticsControllerGetTrafficSourceStatsParams,
) => {
  return [`/analytics/traffic`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsControllerGetTrafficSourceStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetTrafficSourceStats>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetTrafficSourceStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetTrafficSourceStats>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetTrafficSourceStatsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetTrafficSourceStats>>
  > = ({ signal }) => analyticsControllerGetTrafficSourceStats(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetTrafficSourceStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetTrafficSourceStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetTrafficSourceStats>>
>;
export type AnalyticsControllerGetTrafficSourceStatsQueryError = unknown;

/**
 * @summary Get traffic source statistics
 */

export function useAnalyticsControllerGetTrafficSourceStats<
  TData = Awaited<ReturnType<typeof analyticsControllerGetTrafficSourceStats>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetTrafficSourceStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetTrafficSourceStats>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAnalyticsControllerGetTrafficSourceStatsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get page performance statistics
 */
export const analyticsControllerGetPagePerformance = (
  params: AnalyticsControllerGetPagePerformanceParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/analytics/pages`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAnalyticsControllerGetPagePerformanceQueryKey = (
  params: AnalyticsControllerGetPagePerformanceParams,
) => {
  return [`/analytics/pages`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsControllerGetPagePerformanceQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetPagePerformance>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetPagePerformanceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetPagePerformance>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetPagePerformanceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetPagePerformance>>
  > = ({ signal }) => analyticsControllerGetPagePerformance(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetPagePerformance>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetPagePerformanceQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetPagePerformance>>
>;
export type AnalyticsControllerGetPagePerformanceQueryError = unknown;

/**
 * @summary Get page performance statistics
 */

export function useAnalyticsControllerGetPagePerformance<
  TData = Awaited<ReturnType<typeof analyticsControllerGetPagePerformance>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetPagePerformanceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetPagePerformance>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAnalyticsControllerGetPagePerformanceQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user behavior statistics
 */
export const analyticsControllerGetUserBehavior = (
  params: AnalyticsControllerGetUserBehaviorParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/analytics/users`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAnalyticsControllerGetUserBehaviorQueryKey = (
  params: AnalyticsControllerGetUserBehaviorParams,
) => {
  return [`/analytics/users`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsControllerGetUserBehaviorQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetUserBehavior>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetUserBehaviorParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetUserBehavior>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetUserBehaviorQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetUserBehavior>>
  > = ({ signal }) => analyticsControllerGetUserBehavior(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetUserBehavior>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetUserBehaviorQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetUserBehavior>>
>;
export type AnalyticsControllerGetUserBehaviorQueryError = unknown;

/**
 * @summary Get user behavior statistics
 */

export function useAnalyticsControllerGetUserBehavior<
  TData = Awaited<ReturnType<typeof analyticsControllerGetUserBehavior>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetUserBehaviorParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetUserBehavior>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAnalyticsControllerGetUserBehaviorQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get realtime analytics data
 */
export const analyticsControllerGetRealtimeAnalytics = (
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/analytics/realtime`,
    method: 'GET',
    signal,
  });
};

export const getAnalyticsControllerGetRealtimeAnalyticsQueryKey = () => {
  return [`/analytics/realtime`] as const;
};

export const getAnalyticsControllerGetRealtimeAnalyticsQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetRealtimeAnalytics>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeAnalytics>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetRealtimeAnalyticsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeAnalytics>>
  > = ({ signal }) => analyticsControllerGetRealtimeAnalytics(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeAnalytics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetRealtimeAnalyticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetRealtimeAnalytics>>
>;
export type AnalyticsControllerGetRealtimeAnalyticsQueryError = unknown;

/**
 * @summary Get realtime analytics data
 */

export function useAnalyticsControllerGetRealtimeAnalytics<
  TData = Awaited<ReturnType<typeof analyticsControllerGetRealtimeAnalytics>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetRealtimeAnalytics>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getAnalyticsControllerGetRealtimeAnalyticsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get audience analytics
 */
export const analyticsControllerGetAudienceAnalytics = (
  params: AnalyticsControllerGetAudienceAnalyticsParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/analytics/audience`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAnalyticsControllerGetAudienceAnalyticsQueryKey = (
  params: AnalyticsControllerGetAudienceAnalyticsParams,
) => {
  return [`/analytics/audience`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsControllerGetAudienceAnalyticsQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsControllerGetAudienceAnalytics>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetAudienceAnalyticsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetAudienceAnalytics>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsControllerGetAudienceAnalyticsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsControllerGetAudienceAnalytics>>
  > = ({ signal }) => analyticsControllerGetAudienceAnalytics(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsControllerGetAudienceAnalytics>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AnalyticsControllerGetAudienceAnalyticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsControllerGetAudienceAnalytics>>
>;
export type AnalyticsControllerGetAudienceAnalyticsQueryError = unknown;

/**
 * @summary Get audience analytics
 */

export function useAnalyticsControllerGetAudienceAnalytics<
  TData = Awaited<ReturnType<typeof analyticsControllerGetAudienceAnalytics>>,
  TError = unknown,
>(
  params: AnalyticsControllerGetAudienceAnalyticsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof analyticsControllerGetAudienceAnalytics>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAnalyticsControllerGetAudienceAnalyticsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
