/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  CreateUsers201,
  GetAllUserss200Item,
  GetUsersById200,
  UpdateUsers200,
} from '.././models';
import { customInstance } from '../../axios-client';

/**
 * @summary Create Users
 */
export const createUsers = (signal?: AbortSignal) => {
  return customInstance<CreateUsers201>({
    url: `/users`,
    method: 'POST',
    signal,
  });
};

export const getCreateUsersMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUsers>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUsers>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['createUsers'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUsers>>,
    void
  > = () => {
    return createUsers();
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUsers>>
>;

export type CreateUsersMutationError = unknown;

/**
 * @summary Create Users
 */
export const useCreateUsers = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUsers>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createUsers>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getCreateUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get all Userss
 */
export const getAllUserss = (signal?: AbortSignal) => {
  return customInstance<GetAllUserss200Item[]>({
    url: `/users`,
    method: 'GET',
    signal,
  });
};

export const getGetAllUserssQueryKey = () => {
  return [`/users`] as const;
};

export const getGetAllUserssQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUserss>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllUserss>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllUserssQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUserss>>> = ({
    signal,
  }) => getAllUserss(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUserss>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllUserssQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUserss>>
>;
export type GetAllUserssQueryError = unknown;

/**
 * @summary Get all Userss
 */

export function useGetAllUserss<
  TData = Awaited<ReturnType<typeof getAllUserss>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllUserss>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllUserssQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Users by ID
 */
export const getUsersById = (id: string, signal?: AbortSignal) => {
  return customInstance<GetUsersById200>({
    url: `/users/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetUsersByIdQueryKey = (id: string) => {
  return [`/users/${id}`] as const;
};

export const getGetUsersByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersById>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersById>>> = ({
    signal,
  }) => getUsersById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersById>>
>;
export type GetUsersByIdQueryError = unknown;

/**
 * @summary Get Users by ID
 */

export function useGetUsersById<
  TData = Awaited<ReturnType<typeof getUsersById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersById>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Users
 */
export const updateUsers = (id: string) => {
  return customInstance<UpdateUsers200>({ url: `/users/${id}`, method: 'PUT' });
};

export const getUpdateUsersMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUsers>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUsers>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['updateUsers'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUsers>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return updateUsers(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUsers>>
>;

export type UpdateUsersMutationError = unknown;

/**
 * @summary Update Users
 */
export const useUpdateUsers = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUsers>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUsers>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUpdateUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Users
 */
export const deleteUsers = (id: string) => {
  return customInstance<boolean>({ url: `/users/${id}`, method: 'DELETE' });
};

export const getDeleteUsersMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsers>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUsers>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteUsers'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsers>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteUsers(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUsers>>
>;

export type DeleteUsersMutationError = unknown;

/**
 * @summary Delete Users
 */
export const useDeleteUsers = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsers>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUsers>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
