/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import type {
  CreateUserDto,
  LoginDto,
  LogoutResponseDto,
  RefreshTokenDto,
  RefreshTokenResponseDto,
  SignInResponseDto,
  User,
} from '.././models';
import { customInstance } from '../../axios-client';

/**
 * @summary Create a new user account
 */
export const signup = (createUserDto: CreateUserDto, signal?: AbortSignal) => {
  return customInstance<User>({
    url: `/auth/signup`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createUserDto,
    signal,
  });
};

export const getSignupMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signup>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signup>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ['signup'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signup>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return signup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof signup>>
>;
export type SignupMutationBody = CreateUserDto;
export type SignupMutationError = unknown;

/**
 * @summary Create a new user account
 */
export const useSignup = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signup>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof signup>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Login with email and password
 */
export const login = (loginDto: LoginDto, signal?: AbortSignal) => {
  return customInstance<SignInResponseDto>({
    url: `/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginDto,
    signal,
  });
};

export const getLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ['login'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = LoginDto;
export type LoginMutationError = unknown;

/**
 * @summary Login with email and password
 */
export const useLogin = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Access token refreshed successfully
 * @summary Refresh access token
 */
export const refresh = (
  refreshTokenDto: RefreshTokenDto,
  signal?: AbortSignal,
) => {
  return customInstance<RefreshTokenResponseDto>({
    url: `/auth/refresh`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: refreshTokenDto,
    signal,
  });
};

export const getRefreshMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refresh>>,
    TError,
    { data: RefreshTokenDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refresh>>,
  TError,
  { data: RefreshTokenDto },
  TContext
> => {
  const mutationKey = ['refresh'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refresh>>,
    { data: RefreshTokenDto }
  > = (props) => {
    const { data } = props ?? {};

    return refresh(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof refresh>>
>;
export type RefreshMutationBody = RefreshTokenDto;
export type RefreshMutationError = unknown;

/**
 * @summary Refresh access token
 */
export const useRefresh = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refresh>>,
    TError,
    { data: RefreshTokenDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof refresh>>,
  TError,
  { data: RefreshTokenDto },
  TContext
> => {
  const mutationOptions = getRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Logged out successfully
 * @summary Logout from the current session
 */
export const logout = (signal?: AbortSignal) => {
  return customInstance<LogoutResponseDto>({
    url: `/auth/logout`,
    method: 'POST',
    signal,
  });
};

export const getLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['logout'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logout>>,
    void
  > = () => {
    return logout();
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof logout>>
>;

export type LogoutMutationError = unknown;

/**
 * @summary Logout from the current session
 */
export const useLogout = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
