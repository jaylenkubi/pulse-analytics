/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Pulse Analytics
 * Pulse Analytics API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  CreateWebsiteDto,
  ResponseDtoArray,
  UpdateWebsiteDto,
  WebsiteResponseDto,
} from '.././models';
import { customInstance } from '../../axios-client';

/**
 * The Websites has been successfully created
 * @summary Create Websites
 */
export const createWebsites = (
  createWebsiteDto: CreateWebsiteDto,
  signal?: AbortSignal,
) => {
  return customInstance<WebsiteResponseDto>({
    url: `/websites`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createWebsiteDto,
    signal,
  });
};

export const getCreateWebsitesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebsites>>,
    TError,
    { data: CreateWebsiteDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWebsites>>,
  TError,
  { data: CreateWebsiteDto },
  TContext
> => {
  const mutationKey = ['createWebsites'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWebsites>>,
    { data: CreateWebsiteDto }
  > = (props) => {
    const { data } = props ?? {};

    return createWebsites(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWebsitesMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWebsites>>
>;
export type CreateWebsitesMutationBody = CreateWebsiteDto;
export type CreateWebsitesMutationError = unknown;

/**
 * @summary Create Websites
 */
export const useCreateWebsites = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebsites>>,
    TError,
    { data: CreateWebsiteDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createWebsites>>,
  TError,
  { data: CreateWebsiteDto },
  TContext
> => {
  const mutationOptions = getCreateWebsitesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Return the Websites with the specified ID
 * @summary Get Websites by ID
 */
export const getWebsitesById = (id: string, signal?: AbortSignal) => {
  return customInstance<WebsiteResponseDto>({
    url: `/websites/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetWebsitesByIdQueryKey = (id: string) => {
  return [`/websites/${id}`] as const;
};

export const getGetWebsitesByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebsitesById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsitesById>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWebsitesByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebsitesById>>> = ({
    signal,
  }) => getWebsitesById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWebsitesById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWebsitesByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebsitesById>>
>;
export type GetWebsitesByIdQueryError = unknown;

/**
 * @summary Get Websites by ID
 */

export function useGetWebsitesById<
  TData = Awaited<ReturnType<typeof getWebsitesById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsitesById>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetWebsitesByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return all Websitess
 * @summary Get all Websitess
 */
export const getAllWebsitess = (signal?: AbortSignal) => {
  return customInstance<ResponseDtoArray>({
    url: `/websites/all`,
    method: 'GET',
    signal,
  });
};

export const getGetAllWebsitessQueryKey = () => {
  return [`/websites/all`] as const;
};

export const getGetAllWebsitessQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllWebsitess>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllWebsitess>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllWebsitessQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllWebsitess>>> = ({
    signal,
  }) => getAllWebsitess(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllWebsitess>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllWebsitessQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllWebsitess>>
>;
export type GetAllWebsitessQueryError = unknown;

/**
 * @summary Get all Websitess
 */

export function useGetAllWebsitess<
  TData = Awaited<ReturnType<typeof getAllWebsitess>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllWebsitess>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllWebsitessQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return Websitess by query
 * @summary Get by query Websitess
 */
export const getByQueryWebsitess = (signal?: AbortSignal) => {
  return customInstance<ResponseDtoArray>({
    url: `/websites/query`,
    method: 'GET',
    signal,
  });
};

export const getGetByQueryWebsitessQueryKey = () => {
  return [`/websites/query`] as const;
};

export const getGetByQueryWebsitessQueryOptions = <
  TData = Awaited<ReturnType<typeof getByQueryWebsitess>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getByQueryWebsitess>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByQueryWebsitessQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getByQueryWebsitess>>
  > = ({ signal }) => getByQueryWebsitess(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getByQueryWebsitess>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetByQueryWebsitessQueryResult = NonNullable<
  Awaited<ReturnType<typeof getByQueryWebsitess>>
>;
export type GetByQueryWebsitessQueryError = unknown;

/**
 * @summary Get by query Websitess
 */

export function useGetByQueryWebsitess<
  TData = Awaited<ReturnType<typeof getByQueryWebsitess>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getByQueryWebsitess>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetByQueryWebsitessQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update the Websites with the specified ID
 * @summary Update Websites
 */
export const updateWebsites = (
  id: string,
  updateWebsiteDto: UpdateWebsiteDto,
) => {
  return customInstance<WebsiteResponseDto>({
    url: `/websites/update/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateWebsiteDto,
  });
};

export const getUpdateWebsitesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebsites>>,
    TError,
    { id: string; data: UpdateWebsiteDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateWebsites>>,
  TError,
  { id: string; data: UpdateWebsiteDto },
  TContext
> => {
  const mutationKey = ['updateWebsites'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateWebsites>>,
    { id: string; data: UpdateWebsiteDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateWebsites(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateWebsitesMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateWebsites>>
>;
export type UpdateWebsitesMutationBody = UpdateWebsiteDto;
export type UpdateWebsitesMutationError = unknown;

/**
 * @summary Update Websites
 */
export const useUpdateWebsites = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebsites>>,
    TError,
    { id: string; data: UpdateWebsiteDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateWebsites>>,
  TError,
  { id: string; data: UpdateWebsiteDto },
  TContext
> => {
  const mutationOptions = getUpdateWebsitesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete the Websites with the specified ID
 * @summary Delete Websites
 */
export const deleteWebsites = (id: string) => {
  return customInstance<boolean>({
    url: `/websites/delete/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteWebsitesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWebsites>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWebsites>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteWebsites'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWebsites>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteWebsites(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWebsitesMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWebsites>>
>;

export type DeleteWebsitesMutationError = unknown;

/**
 * @summary Delete Websites
 */
export const useDeleteWebsites = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWebsites>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteWebsites>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteWebsitesMutationOptions(options);

  return useMutation(mutationOptions);
};
